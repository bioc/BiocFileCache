% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BiocFileCache-class.R
\docType{methods}
\name{BiocFileCache-class}
\alias{BiocFileCache-class}
\alias{BiocFileCache}
\alias{bfccache,BiocFileCacheBase-method}
\alias{bfccache}
\alias{length,BiocFileCacheBase-method}
\alias{bfcrid}
\alias{bfcrid,BiocFileCacheReadOnly-method}
\alias{bfcrid,BiocFileCache-method}
\alias{[,BiocFileCache,character,missing-method}
\alias{[,BiocFileCacheReadOnly,character,missing-method}
\alias{[,BiocFileCache,missing,missing-method}
\alias{[,BiocFileCacheReadOnly,missing,missing-method}
\alias{[[,BiocFileCacheBase,character,missing-method}
\alias{[[<-,BiocFileCache,character,missing,character-method}
\alias{bfcnew,BiocFileCache-method}
\alias{bfcnew}
\alias{bfcadd,BiocFileCache-method}
\alias{bfcadd}
\alias{bfcinfo,BiocFileCacheBase-method}
\alias{bfcinfo}
\alias{bfcrid,tbl_bfc-method}
\alias{bfcpath,BiocFileCacheBase-method}
\alias{bfcpath}
\alias{bfcrpath,BiocFileCacheBase-method}
\alias{bfcrpath}
\alias{bfcupdate,BiocFileCache-method}
\alias{bfcupdate}
\alias{bfcquery,BiocFileCacheBase-method}
\alias{bfcquery}
\alias{bfccount,BiocFileCacheBase-method}
\alias{bfccount}
\alias{bfccount,tbl_bfc-method}
\alias{bfcneedsupdate,BiocFileCacheBase-method}
\alias{bfcneedsupdate}
\alias{bfcdownload,BiocFileCache-method}
\alias{bfcdownload}
\alias{bfcremove,BiocFileCache-method}
\alias{bfcremove}
\alias{bfcsync,BiocFileCache-method}
\alias{bfcsync}
\alias{cleanbfc,BiocFileCache-method}
\alias{cleanbfc}
\alias{removebfc,BiocFileCache-method}
\alias{removebfc}
\alias{show,BiocFileCacheBase-method}
\title{BiocFileCache class}
\usage{
BiocFileCache(cache = user_cache_dir(appname = "BiocFileCache"))

\S4method{bfccache}{BiocFileCacheBase}(x)

\S4method{length}{BiocFileCacheBase}(x)

bfcrid(x)

\S4method{bfcrid}{BiocFileCacheReadOnly}(x)

\S4method{bfcrid}{BiocFileCache}(x)

\S4method{[}{BiocFileCache,character,missing}(x, i, j, ..., drop = TRUE)

\S4method{[}{BiocFileCacheReadOnly,character,missing}(x, i, j, ...,
  drop = TRUE)

\S4method{[}{BiocFileCache,missing,missing}(x, i, j, ..., drop = TRUE)

\S4method{[}{BiocFileCacheReadOnly,missing,missing}(x, i, j, ..., drop = TRUE)

\S4method{[[}{BiocFileCacheBase,character,missing}(x, i, j)

\S4method{[[}{BiocFileCache,character,missing,character}(x, i, j,
  ...) <- value

\S4method{bfcnew}{BiocFileCache}(x, rname, rtype = c("relative", "local"),
  ext = NA_character_)

\S4method{bfcadd}{BiocFileCache}(x, rname, fpath = rname, rtype = c("auto",
  "relative", "local", "web"), action = c("copy", "move", "asis"),
  proxy = "", ...)

\S4method{bfcinfo}{BiocFileCacheBase}(x, rids)

\S4method{bfcrid}{tbl_bfc}(x)

\S4method{bfcpath}{BiocFileCacheBase}(x, rid)

\S4method{bfcrpath}{BiocFileCacheBase}(x, rnames, ..., rids)

\S4method{bfcupdate}{BiocFileCache}(x, rids, rname = NULL, rpath = NULL,
  fpath = NULL, proxy = "")

\S4method{bfcquery}{BiocFileCacheBase}(x, query)

\S4method{bfccount}{BiocFileCacheBase}(x)

\S4method{bfccount}{tbl_bfc}(x)

\S4method{bfcneedsupdate}{BiocFileCacheBase}(x, rids)

\S4method{bfcdownload}{BiocFileCache}(x, rid, proxy = "")

\S4method{bfcremove}{BiocFileCache}(x, rids)

\S4method{bfcsync}{BiocFileCache}(x, verbose = TRUE)

\S4method{cleanbfc}{BiocFileCache}(x, days = 120, ask = TRUE)

\S4method{removebfc}{BiocFileCache}(x, ask = TRUE)

\S4method{show}{BiocFileCacheBase}(object)
}
\arguments{
\item{cache}{character(1) On-disk location (directory path) of
cache. For default location see \code{\link[rappdirs]{user_cache_dir}}.}

\item{x}{A \code{BiocFileCache} instance.}

\item{i}{character() 'rid' identifiers.}

\item{j}{Ignored.}

\item{...}{For 'bfcadd': For \code{action="copy"}, additional
arguments passed to \code{file.copy}. For 'bfcrpaths':
Additional arguments passed to 'bfcadd'.}

\item{drop}{Ignored.}

\item{value}{character(1) Replacement file path.}

\item{rname}{character(1) Name of object in file cache. For
'bfcupdate' a character vector of replacement rnames.}

\item{rtype}{character(1) 'local', 'relative', or 'web' indicating
if the resource is a local file, a relative path in the cache,
or a web resource. For \code{bfcnew}: local or relative are
only options. For \code{bfcadd}, the default 'auto' creates
relative or web paths, based on the path prefix.}

\item{ext}{character(1) A file extension to add to the local
copy of the file (e.g., \sQuote{sqlite}, \sQuote{txt},
\sQuote{tar.gz}).}

\item{fpath}{For bfcadd(), character(1) path to current file
location or remote web resource. If none is given, the rname is
assumed to also be the path location. For bfcupdate()
character() vector of replacement web resources.}

\item{action}{character(1) How to handle the file: create a
\code{copy} of \code{fpath} in the cache directory; \code{move}
the file to the cache directory; or \code{asis} leave the file
in current location but save the path in the cache. If 'rtype
== "relative"', action can not be "asis".}

\item{proxy}{character(1) (Optional) proxy server.}

\item{rids}{character() Vector of rids.}

\item{rid}{character(1) Unique resource id.}

\item{rnames}{character() list of rnames to search and match on.}

\item{rpath}{character() vector of replacement rpaths.}

\item{query}{character() Pattern(s) to match in resource. It will
match the pattern against rname, rpath, and fpath using SQL
\code{LIKE}, using \code{&&} logic across query elements.}

\item{verbose}{logical(1) If descriptive message and list of issues
should be included as output.}

\item{days}{integer(1) Number of days between accessDate and
currentDate; if exceeded entry will be deleted.}

\item{ask}{logical(1) Prompt if really want to remove cache and
files.}

\item{object}{A \code{BiocFileCache} instance.}
}
\value{
For 'BiocFileCache': a \code{BiocFileCache} instance.

For 'bfccache': character(1) location of the directory
    containing the cache.

For 'length': integer(1) Number of objects in the file
    cache.

For '[': A subset of the BiocFileCache object.

For '[[': named character(1) rpath for the given resource
    in the cache.

For '[[<-': Updated BiocFileCache, invisibly.

For 'bfcnew': named character(1), the path to save your
    object / file.  The name of the return value is the unique rid
    for the resource.

For 'bfcadd': named character(1), the path to save your
    object / file.  The name of the character is the unique rid for
    the resource.

For 'bfcinfo': A \code{bfc_tbl} of current resources in the
    database.

For 'bfcpath': the file path location to load and original
    source information for web resources.

For 'bfcrpath': The local file path location to load.

For 'bfcupdate': an updated \code{BiocFileCache} object,
    invisibly.

For 'bfcquery': A \code{bfc_tbl} of current resources in
    the database whose rname, rpath, or fpath contained query. If
    multiple values are given, the resource must contain all of the
    patterns. A tbl with zero rows is returned when no resources
    match the query.

For 'bfccount': integer(1) Number of objects in the cache
    or query.

For 'bfcneedsupdate': named logical vector if resource
    needs to be updated. The name is the resource
    'rid'. \code{TRUE}: fpath \code{modified} time of web resource
    more recent than in BiocFileCache; \code{FALSE}: fpath
    \code{modified} time of web resource not more recent than in
    BiocFileCache; \code{NA}: web resource modified time could not
    be determined.

For 'bfcdownload': character(1) path to downloaded resource
    in cache.

For 'bfcremove': updated BiocFileCache object, invisibly

For 'bfcsync': logical(1) indicating whether the cache is
    in sync (\code{TRUE}) or not. 'verbose' is TRUE by default, so
    descriptive messages will also be included.

For 'cleanbfc': updated BiocFileCache, invisibly.

For 'removebfc': TRUE if successfully removed.
}
\description{
This class represents the location of files stored on disk. Use the
return value to add and retrieve files that persist across
sessions.
}
\details{
The package defines 'BiocFileCache', 'BiocFileCacheBase' and
'BiocFileCacheReadOnly' classes.

Slots unique to 'BiocFileCache' and  related classes:
\itemize{
  \item{'cache': }{character(1), Describes the On-disk location
    (directory path) of the cache}
  \item{'rid': }{character(), List of the unique rids in the cache. }
}

The cache creates an RSQLite database to keep track of local and remote
resources. Each item located in the database will have the following
information:
\itemize{
  \item{'rid': }{resource id. Autogenerated. This is a unique identifier
    automatically generated when a resource is added to the cache}
  \item{'rname': }{resource name. This is given by the user when a
    resource is added to the cache. It does not have to be unique
    and can be updated at anytime. We recommend descriptive key
    words and identifers.}
  \item{'create_time': }{The date and time a resource is added to the cache.}
  \item{'access_time': }{The date and time a resource is utilized
    within the cache. The access time is updated when the resource
    is updated or accessed}
  \item{'rpath': }{resource path. This is the path to the local
    (on-disk) file}
  \item{'rtype': }{resource type. Either "relative", "local", or
    "web", indicating if the resource has a remote origin}
  \item{'fpath': }{If rtype is "web", this is the link to the
    remote resource. It will be utilized to download or update the
    remote data}
  \item{'last_modified_time': }{For a remote resource, the
    last_modified (if available) information for the local copy of
    the data. This information is checked against the remote
    resource to determine if the local copy is stale and needs to
    be updated}
}
}
\section{Methods (by generic)}{
\itemize{
\item \code{bfccache}: Get the location of the on-disk cache.

\item \code{length}: Get the number of objects in the file
cache.

\item \code{bfcrid}: Get the rids of the object.

\item \code{[}: Subset a BiocFileCache object.

\item \code{[[}: Get a file path for select resources from
the cache.

\item \code{[[<-}: Set the file path of selected resources
from the cache.

\item \code{bfcnew}: Add a resource to the database

\item \code{bfcadd}: Add an existing resource to the database

\item \code{bfcinfo}: list resources in database

\item \code{bfcrid}: Get the rids of the object

\item \code{bfcpath}: display paths of resource

\item \code{bfcrpath}: display rpath of resource. If 'rnames' is
in the cache the path is returned, if it is not it will try to
add it to the cache with 'bfcadd'

\item \code{bfcupdate}: Update a resource in the cache

\item \code{bfcquery}: query resource

\item \code{bfccount}: Get the number of objects in the file
cache or query.

\item \code{bfcneedsupdate}: check if a resource needs to be updated

\item \code{bfcdownload}: Redownload resource to location in cache

\item \code{bfcremove}: Remove a resource to the database.  If
the local file is located in \code{bfccache(x)}, the file will
also be deleted.

\item \code{bfcsync}: sync cache and resource.

\item \code{cleanbfc}: Remove old/unused files in
BiocFileCache. If file to be removed is not in the bfccache
location it will not be deleted.

\item \code{removebfc}: Completely remove the BiocFileCache

\item \code{show}: Display a \code{BiocFileCache} instance.
}}

\examples{
# bfc <- BiocFileCache()            # global cache
# bfc
bfc0 <- BiocFileCache(tempfile())         # temporary catch for examples
bfccache(bfc0)
length(bfc0)
path <- bfcnew(bfc0, "NewResource")
path
fl1 <- tempfile(); file.create(fl1)
bfcadd(bfc0, "Test1", fl1)                 # copy
fl2 <- tempfile(); file.create(fl2)
bfcadd(bfc0, "Test2", fl2, action="move")         # move
fl3 <- tempfile(); file.create(fl3)
add3 <- bfcadd(bfc0, "Test3", fl3, rtype="local", action="asis")  # reference
rid3 <- names(add3)

bfc0
file.exists(fl1)                                # TRUE
file.exists(fl2)                                # FALSE
file.exists(fl3)                                # TRUE

# add a remote resource
url <- "http://httpbin.org/get"
bfcadd(bfc0, "TestWeb", fpath=url)
bfcinfo(bfc0)
bfcpath(bfc0, rid3)
bfcrpath(bfc0, rids = rid3)
bfcupdate(bfc0, rid3, rpath=fl3, rname="NewRname")
bfc0[[rid3]] = fl1
bfcupdate(bfc0, "BFC5", fpath="http://google.com")
bfcquery(bfc0, "test")
bfccount(bfc0)
bfccount(bfcquery(bfc0, "test"))
bfcneedsupdate(bfc0, "BFC5")
bfcdownload(bfc0, "BFC5")
bfcremove(bfc0, rid3)
bfcinfo(bfc0)
bfcsync(bfc0)
bfcremove(bfc0, "BFC1")
bfcsync(bfc0, FALSE)
\dontrun{cleanbfc(bfc, ask=FALSE)}
\dontrun{removebfc(bfc, ask=FALSE)}
}
